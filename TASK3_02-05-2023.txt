SELECT * FROM EMPLOYEEE;

SCALAR FUNCTIONS

1)
create function max_salary()
returns integer
as
begin 
return ( select  max(sal) from EMPLOYEEE)
end;

select dbo.max_salary() as max_salary;

2)
create function min_salary()
returns integer
as
begin 
return ( select  min(sal) from EMPLOYEEE)
end;

select dbo.min_salary() as min_salary;

3)
create function total_salary()
returns integer
as
begin 
return ( select  sum(sal) from EMPLOYEEE)
end;

select dbo.total_salary() as total_salary;

4)
create function total_employees()
returns integer
as
begin 
return ( select  count(ENO) from EMPLOYEEE )
end;

select dbo.total_employees() as total_employee;

5)
create function avg_salary()
returns integer
as
begin 
return ( select  avg(sal) from EMPLOYEEE)
end;

select dbo.avg_salary() as avg_salary;

6)
CREATE FUNCTION LENGTH ( @INPUTSTRING VARCHAR(10))
RETURNS VARCHAR(10)
AS
BEGIN
RETURN LEN(@INPUTSTRING)
END;

select dbo.LENGTH('CHAITRA');

7)
CREATE FUNCTION SQRT ( @INPUTSTRING INT)
RETURNS INT
AS
BEGIN
RETURN SQRT(@INPUTSTRING)
END;

select dbo.SQRT('64');

8)
CREATE FUNCTION degrees ( @INPUTSTRING INT)
RETURNS INT
AS
BEGIN
RETURN DEGREES(@INPUTSTRING)
END;

select dbo.DEGREES('10');

9)
CREATE FUNCTION RADIANS ( @INPUTSTRING INT)
RETURNS INT
AS
BEGIN
RETURN RADIANS(@INPUTSTRING)
END;

select dbo.RADIANS('180');

10)
create function ConvertUppertoLower( @inputString varchar(10))
returns varchar(10)
as
begin 
return Lower(@inputString )
end;

select dbo.ConvertUppertoLower('CHAITRA');





INLINE FUNCTIONS

1)
CREATE FUNCTION FN_EMPLOYEEDETAILS()
RETURNS TABLE 
AS
RETURN ( SELECT * FROM EMPLOYEEE WHERE SAL > 3000);

SELECT * FROM FN_EMPLOYEEDETAILS();

2)
CREATE FUNCTION FN_EMPNO()
RETURNS TABLE 
AS
RETURN ( SELECT * FROM EMPLOYEEE WHERE ENO= 7698 OR ENO=7839);

SELECT * FROM FN_EMPNO();

3)
CREATE FUNCTION FN_EPLOYEE1()
RETURNS TABLE 
AS
RETURN ( SELECT * FROM EMPLOYEEE WHERE ENO= 7698 AND MGR=7839);

SELECT * FROM FN_EPLOYEE1();


4)
CREATE FUNCTION FN_EMPDEATILS2()
RETURNS TABLE 
AS
RETURN ( SELECT ENO, ENAME, SAL, DEPTNO FROM EMPLOYEEE ) 

SELECT  * FROM FN_EMPDEATILS2()



SELECT * FROM EMPLOYEE2;
5)
CREATE FUNCTION FN_EMPLOYEEE()
RETURNS TABLE 
AS
RETURN ( SELECT DISTINCT E.ENO, EE.JOB FROM EMPLOYEEE E , EMPLOYEE2 EE WHERE E.ENO=EE.ENO)

SELECT * FROM FN_EMPLOYEEE()

6)
CREATE FUNCTION FN_EMPNO1(@EMPNO INT)
RETURNS TABLE 
AS
RETURN (SELECT * FROM EMPLOYEEE WHERE ENO > @EMPNO)

SELECT * FROM  FN_EMPNO1(7845)

7)
CREATE FUNCTION FN_EMPNO2(@EMPNO INT)
RETURNS TABLE 
AS
RETURN (SELECT * FROM EMPLOYEEE WHERE ENO > @EMPNO AND JOB='CLERK')

SELECT * FROM  FN_EMPNO2(7845)

8)
CREATE FUNCTION FN_EMPSALARY(@EMPSAL INT)
RETURNS TABLE 
AS
RETURN (SELECT ENO, ENAME, SAL FROM EMPLOYEEE WHERE SAL >= @EMPSAL )

SELECT * FROM  FN_EMPSALARY(5000);

9)
CREATE FUNCTION FN_EMPNAME()
RETURNS TABLE 
AS
RETURN (SELECT ENAME FROM EMPLOYEEE WHERE ENAME LIKE 'S%' )

SELECT * FROM FN_EMPNAME()

10)
CREATE FUNCTION FN_EMPLOYEESALARY()
RETURNS TABLE 
AS
RETURN (SELECT ENAME, SAL FROM EMPLOYEEE WHERE SAL BETWEEN 4500 AND 5500 )

SELECT * FROM FN_EMPLOYEESALARY()




JOINING INLINE FUNCTION OUTPUT WITH A TABLE:-

SELECT * FROM DEPARTMENT;
SELECT * FROM FN_EMPDEATILS2();



SELECT * FROM DEPARTMENT , FN_EMPDEATILS2() ;

SELECT * FROM DEPARTMENT D,  FN_EMPDEATILS2() F
WHERE F.DEPTNO=D.DID
